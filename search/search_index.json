{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Introduction This project is a fullstack web application for a personal task manager. User can create, view and manage tasks on a web browser. REST endpoints are provided by services hosted on Oracle Cloud Infrastructure compute instance. The application can be accessed by this link . Technology stack Front-end portion of the application is written in ReactJs with Bootstrap 5 and tested with React Testing Library and Jest. Back-end service uses Dropwizard framework and is tested with JUnit 5. For data persistence, MySQL server is used. Entity diagram The entity diagram is simple with only 1 Entity - Task.","title":"Overview"},{"location":"#overview","text":"","title":"Overview"},{"location":"#introduction","text":"This project is a fullstack web application for a personal task manager. User can create, view and manage tasks on a web browser. REST endpoints are provided by services hosted on Oracle Cloud Infrastructure compute instance. The application can be accessed by this link .","title":"Introduction"},{"location":"#technology-stack","text":"Front-end portion of the application is written in ReactJs with Bootstrap 5 and tested with React Testing Library and Jest. Back-end service uses Dropwizard framework and is tested with JUnit 5. For data persistence, MySQL server is used.","title":"Technology stack"},{"location":"#entity-diagram","text":"The entity diagram is simple with only 1 Entity - Task.","title":"Entity diagram"},{"location":"about/","text":"About Project This project is the submission for a Fullstack challenge Author Truong Kim Son Github","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#project","text":"This project is the submission for a Fullstack challenge","title":"Project"},{"location":"about/#author","text":"Truong Kim Son Github","title":"Author"},{"location":"getting_started/","text":"Getting started Pre-requisite In order to build and deploy the application locally, you'll need the following dependencies: Docker - link Git - link Build Docker images Clone the fullstack-task-manager to your local machine from here Navigate to task-manager directory 1 cd task-manager Build Docker image for back-end Dropwizard service using 1 docker build -t <docker-image-name>:<version-tag> . Navigate to task-manager-client/src/api/TaskAPI.js and ensure the HOST value is set to 'http://localhost:8080' Build Docker image for ReactJs client using 1 docker build -t <docker-image-name>:<version-tag> . Pull official Docker image for MySQL 8.0 1 docker pull mysql:8.0 Check that you have all three Docker images <backend service image> , <client image> and mysql:8.0 1 docker image ls Alternatively, you can pull pre-built Docker images from Oracle Container registry 1 2 docker pull syd.ocir.io/sdvw2vh5qake/task-manager/service:1.0 docker pull syd.ocir.io/sdvw2vh5qake/task-manager/client:1.0 Deploy locally with docker-compose Navigate back to root directory fullstack-task-manager Open up docker-compose.yml file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 version : \"3.9\" services : db : image : mysql:8.0 environment : - MYSQL_ROOT_PASSWORD=password - MYSQL_DATABASE=task-db - MYSQL_USER=task-service - MYSQL_PASSWORD=password volumes : - db-data:/var/lib/mysql container_name : mysql1 web : image : syd.ocir.io/sdvw2vh5qake/task-manager/service:1.0 ports : - \"8080:8080\" restart : always links : - db depends_on : - \"db\" container_name : task-service client : image : syd.ocir.io/sdvw2vh5qake/task-manager/client:1.0 ports : - \"80:80\" restart : always depends_on : - \"web\" container_name : task-client volumes : db-data : Ensure the following values match the names given to your Docker images 1 2 3 4 web : image : <your-service-image-name>:<version-tag> client : image : <your-client-image-name>:<version-tag> Run the following command to deploy Docker containers 1 docker-compose up -d Wait till the deployment is finished. You should be able to see 3 containers running 1 docker ps 1 2 3 4 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 028980e2a15c task-manager-client:1.0 \"/docker-entrypoint.\u2026\" 16 hours ago Up 16 hours 0.0.0.0:80->80/tcp task-client 7f6441710999 task-manager:1.0 \"bash ./startup.sh\" 16 hours ago Up 16 hours 0.0.0.0:8080->8080/tcp task-service 08bf55498a2a mysql:8.0 \"docker-entrypoint.s\u2026\" 16 hours ago Up 16 hours 3306/tcp, 33060/tcp mysql1 Visit http://localhost/ to verify that the application is running correctly Deploy on remote host In order deploy the application remotely, you can create a secure connection into the remote host and repeat the steps above, or you can create a remote context using docker context and deploy from your local machine. More instructions on how to deploy to remote host using docker context can be found here","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting started"},{"location":"getting_started/#pre-requisite","text":"In order to build and deploy the application locally, you'll need the following dependencies: Docker - link Git - link","title":"Pre-requisite"},{"location":"getting_started/#build-docker-images","text":"Clone the fullstack-task-manager to your local machine from here Navigate to task-manager directory 1 cd task-manager Build Docker image for back-end Dropwizard service using 1 docker build -t <docker-image-name>:<version-tag> . Navigate to task-manager-client/src/api/TaskAPI.js and ensure the HOST value is set to 'http://localhost:8080' Build Docker image for ReactJs client using 1 docker build -t <docker-image-name>:<version-tag> . Pull official Docker image for MySQL 8.0 1 docker pull mysql:8.0 Check that you have all three Docker images <backend service image> , <client image> and mysql:8.0 1 docker image ls Alternatively, you can pull pre-built Docker images from Oracle Container registry 1 2 docker pull syd.ocir.io/sdvw2vh5qake/task-manager/service:1.0 docker pull syd.ocir.io/sdvw2vh5qake/task-manager/client:1.0","title":"Build Docker images"},{"location":"getting_started/#deploy-locally-with-docker-compose","text":"Navigate back to root directory fullstack-task-manager Open up docker-compose.yml file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 version : \"3.9\" services : db : image : mysql:8.0 environment : - MYSQL_ROOT_PASSWORD=password - MYSQL_DATABASE=task-db - MYSQL_USER=task-service - MYSQL_PASSWORD=password volumes : - db-data:/var/lib/mysql container_name : mysql1 web : image : syd.ocir.io/sdvw2vh5qake/task-manager/service:1.0 ports : - \"8080:8080\" restart : always links : - db depends_on : - \"db\" container_name : task-service client : image : syd.ocir.io/sdvw2vh5qake/task-manager/client:1.0 ports : - \"80:80\" restart : always depends_on : - \"web\" container_name : task-client volumes : db-data : Ensure the following values match the names given to your Docker images 1 2 3 4 web : image : <your-service-image-name>:<version-tag> client : image : <your-client-image-name>:<version-tag> Run the following command to deploy Docker containers 1 docker-compose up -d Wait till the deployment is finished. You should be able to see 3 containers running 1 docker ps 1 2 3 4 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 028980e2a15c task-manager-client:1.0 \"/docker-entrypoint.\u2026\" 16 hours ago Up 16 hours 0.0.0.0:80->80/tcp task-client 7f6441710999 task-manager:1.0 \"bash ./startup.sh\" 16 hours ago Up 16 hours 0.0.0.0:8080->8080/tcp task-service 08bf55498a2a mysql:8.0 \"docker-entrypoint.s\u2026\" 16 hours ago Up 16 hours 3306/tcp, 33060/tcp mysql1 Visit http://localhost/ to verify that the application is running correctly","title":"Deploy locally with docker-compose"},{"location":"getting_started/#deploy-on-remote-host","text":"In order deploy the application remotely, you can create a secure connection into the remote host and repeat the steps above, or you can create a remote context using docker context and deploy from your local machine. More instructions on how to deploy to remote host using docker context can be found here","title":"Deploy on remote host"},{"location":"rest_api/","text":"REST API Task Resource The Task Resource is exposed with {base_url}:8080/api/v1/task . This resource provide endpoints to carry out CRUD actions on Task instances. Variable {base_url} should be the address of the host on which the service is currently running. If you are running the application locally. {base_url} should be http://localhost Endpoints 1. Get all tasks URL 1 {base_url}:8080/api/v1/task/all Method GET Parameters None Example request 1 http://localhost:8080/api/v1/task/all Example response CODE: 200 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [ { \"id\" : 1 , \"description\" : \"See dentist B\" , \"date\" : \"2021-07-25\" , \"overdue\" : false }, { \"id\" : 4 , \"description\" : \"New task\" , \"date\" : \"2021-07-27\" , \"overdue\" : false } ] 2. Create new task URL 1 {base_url}:8080/api/v1/task/create Method POST Parameters Header 1 Content-Type: application/json Example request 1 http://localhost:8080/api/v1/task/create Request body 1 2 3 4 { \"description\" : \"calculate microchip\" , \"date\" : \"2021-07-21\" } Example response CODE: 201 1 2 3 4 5 6 { \"id\" : 78 , \"description\" : \"calculate microchip\" , \"date\" : \"2021-07-21\" , \"overdue\" : false } CODE: 422 1 2 3 4 5 6 { \"errors\" : [ \"date must be a date in the present or in the future\" , \"description must not be blank\" ] } 3. Update existing task URL 1 {base_url}:8080/api/v1/task/update Method PUT Parameters Header 1 Content-Type: application/json Example request 1 http://localhost:8080/api/v1/task/update Request body 1 2 3 4 5 { \"id\" : 78 , \"description\" : \"reboot bandwidth\" , \"date\" : \"2021-07-22\" } Example response CODE: 200 1 2 3 4 5 6 { \"id\" : 78 , \"description\" : \"reboot bandwidth\" , \"date\" : \"2021-07-22\" , \"overdue\" : false } CODE: 422 1 2 3 4 5 6 { \"errors\" : [ \"date must be a date in the present or in the future\" , \"description must not be blank\" ] } 4. Delete existing task URL 1 {base_url}:8080/api/v1/{task_id}/delete Method DELETE Parameters {task_id} : id of the task to be deleted Header 1 Content-Type: application/json Example request 1 http://localhost:8080/api/v1/task/78/delete Example response CODE: 200 CODE: 404","title":"REST API"},{"location":"rest_api/#rest-api","text":"","title":"REST API"},{"location":"rest_api/#task-resource","text":"The Task Resource is exposed with {base_url}:8080/api/v1/task . This resource provide endpoints to carry out CRUD actions on Task instances. Variable {base_url} should be the address of the host on which the service is currently running. If you are running the application locally. {base_url} should be http://localhost","title":"Task Resource"},{"location":"rest_api/#endpoints","text":"","title":"Endpoints"},{"location":"rest_api/#1-get-all-tasks","text":"","title":"1. Get all tasks"},{"location":"rest_api/#url","text":"1 {base_url}:8080/api/v1/task/all","title":"URL"},{"location":"rest_api/#method","text":"GET","title":"Method"},{"location":"rest_api/#parameters","text":"None","title":"Parameters"},{"location":"rest_api/#example-request","text":"1 http://localhost:8080/api/v1/task/all","title":"Example request"},{"location":"rest_api/#example-response","text":"CODE: 200 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [ { \"id\" : 1 , \"description\" : \"See dentist B\" , \"date\" : \"2021-07-25\" , \"overdue\" : false }, { \"id\" : 4 , \"description\" : \"New task\" , \"date\" : \"2021-07-27\" , \"overdue\" : false } ]","title":"Example response"},{"location":"rest_api/#2-create-new-task","text":"","title":"2. Create new task"},{"location":"rest_api/#url_1","text":"1 {base_url}:8080/api/v1/task/create","title":"URL"},{"location":"rest_api/#method_1","text":"POST","title":"Method"},{"location":"rest_api/#parameters_1","text":"Header 1 Content-Type: application/json","title":"Parameters"},{"location":"rest_api/#example-request_1","text":"1 http://localhost:8080/api/v1/task/create Request body 1 2 3 4 { \"description\" : \"calculate microchip\" , \"date\" : \"2021-07-21\" }","title":"Example request"},{"location":"rest_api/#example-response_1","text":"CODE: 201 1 2 3 4 5 6 { \"id\" : 78 , \"description\" : \"calculate microchip\" , \"date\" : \"2021-07-21\" , \"overdue\" : false } CODE: 422 1 2 3 4 5 6 { \"errors\" : [ \"date must be a date in the present or in the future\" , \"description must not be blank\" ] }","title":"Example response"},{"location":"rest_api/#3-update-existing-task","text":"","title":"3. Update existing task"},{"location":"rest_api/#url_2","text":"1 {base_url}:8080/api/v1/task/update","title":"URL"},{"location":"rest_api/#method_2","text":"PUT","title":"Method"},{"location":"rest_api/#parameters_2","text":"Header 1 Content-Type: application/json","title":"Parameters"},{"location":"rest_api/#example-request_2","text":"1 http://localhost:8080/api/v1/task/update Request body 1 2 3 4 5 { \"id\" : 78 , \"description\" : \"reboot bandwidth\" , \"date\" : \"2021-07-22\" }","title":"Example request"},{"location":"rest_api/#example-response_2","text":"CODE: 200 1 2 3 4 5 6 { \"id\" : 78 , \"description\" : \"reboot bandwidth\" , \"date\" : \"2021-07-22\" , \"overdue\" : false } CODE: 422 1 2 3 4 5 6 { \"errors\" : [ \"date must be a date in the present or in the future\" , \"description must not be blank\" ] }","title":"Example response"},{"location":"rest_api/#4-delete-existing-task","text":"","title":"4. Delete existing task"},{"location":"rest_api/#url_3","text":"1 {base_url}:8080/api/v1/{task_id}/delete","title":"URL"},{"location":"rest_api/#method_3","text":"DELETE","title":"Method"},{"location":"rest_api/#parameters_3","text":"{task_id} : id of the task to be deleted Header 1 Content-Type: application/json","title":"Parameters"},{"location":"rest_api/#example-request_3","text":"1 http://localhost:8080/api/v1/task/78/delete","title":"Example request"},{"location":"rest_api/#example-response_3","text":"CODE: 200 CODE: 404","title":"Example response"},{"location":"testing/","text":"Testing REST Endpoint testing For REST Endpoint testing, Postman is used to create test suites. Test suites and environment files can be found in /rest-endpoint-test directory production.postman_environment.json - environment file containing environment variables values. Needed to be modified according to testing environment before running test Task_API_test.postman_collection.json - test suites file containing test information In order to run the test suite, ensure newman is installed. More from here Run 1 newman run Task_API_test.postman_collection.json -e production.postman_environment.json A sample test report can be found in \\rest-endpoint-test\\newman ReactJs app testing For ReactJs app, testing is done using Jest and React Testing Libraries Test files are located inside __test__ folders and/or suffixed with .test.js At the /task-manage-client directory, run tests with 1 npm run test","title":"Testing"},{"location":"testing/#testing","text":"","title":"Testing"},{"location":"testing/#rest-endpoint-testing","text":"For REST Endpoint testing, Postman is used to create test suites. Test suites and environment files can be found in /rest-endpoint-test directory production.postman_environment.json - environment file containing environment variables values. Needed to be modified according to testing environment before running test Task_API_test.postman_collection.json - test suites file containing test information In order to run the test suite, ensure newman is installed. More from here Run 1 newman run Task_API_test.postman_collection.json -e production.postman_environment.json A sample test report can be found in \\rest-endpoint-test\\newman","title":"REST Endpoint testing"},{"location":"testing/#reactjs-app-testing","text":"For ReactJs app, testing is done using Jest and React Testing Libraries Test files are located inside __test__ folders and/or suffixed with .test.js At the /task-manage-client directory, run tests with 1 npm run test","title":"ReactJs app testing"}]}